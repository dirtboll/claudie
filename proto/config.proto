syntax = "proto3";
package claudie;
option go_package = "proto/pb";

// Config holds data for a single manifest.
message Config {
  // Config ID in the DB.
  string id = 1;
  // Config name - same as input manifest name.
  string name = 2;
  // resourceName represents the input manifest resource name in Kubernetes
  string resourceName = 3;
  // resourceNamespace represents the input manifest resource namespace in Kubernetes
  string resourceNamespace = 4;
  // Client defined manifest.
  string manifest = 5;
  // Desired state based on the input manifest manifest.
  Project desiredState = 6;
  // Current state of the infrastructure.
  Project currentState = 7;
  // Manifest state checksum.
  bytes msChecksum = 8;
  // Desired state checksum.
  bytes dsChecksum = 9;
  // Current state checksum.
  bytes csChecksum = 10;
  // Builder time to live counter.
  int32 builderTTL = 11;
  // Scheduler time to live counter.
  int32 schedulerTTL = 12;
  // Per-cluster workflow state.
  map<string, Workflow> state = 13;
}

message Workflow {
  enum Stage {
    // NONE indicates that no stage is currently executing.
    NONE = 0;
    // TERRAFORMER indicates that the cluster is currently being build in terraformer.
    TERRAFORMER = 1;
    // ANSIBLER indicates that the cluster is currently being build in ansibler.
    ANSIBLER = 2;
    // KUBE_ELEVEN indicates that the cluster is currently being build in kube eleven.
    KUBE_ELEVEN = 3;
    // KUBER indicates that the cluster is currently being build in kuber.
    KUBER = 4;
    // SCHEDULER indicates that the config is being processed by the scheduler.
    SCHEDULER = 5;
    // DESTROY_TERRAFORMER indicates that infra for a cluster is being deleted.
    DESTROY_TERRAFORMER = 7;
    // DESTROY_KUBER indicates that data for a cluster is being deleted.
    DESTROY_KUBER = 8;
    // DELETE_NODES indicates the nodes are being deleted for the cluster.
    DELETE_NODES = 9;
  }

  enum Status {
    // DONE indicates that the workflow has finished.
    DONE = 0;
    // ERROR indicates that an error occurred while building the cluster.
    ERROR = 1;
    // IN_PROGRESS indicates that the cluster is currently being build.
    IN_PROGRESS = 2;
  }

  Stage stage = 1;
  Status status = 2;
  // additional information describing the state and status.
  string description = 3;
}

// Project represents the desired and current state of the manifest.
message Project {
  // Name of the project - same as input manifest name.
  string name = 1;
  // Array of Kubernetes clusters.
  repeated K8scluster clusters = 2;
  //  Array of Load Balancer clusters.
  repeated LBcluster loadBalancerClusters = 3;
}

// K8scluster represents a single kubernetes cluster specified in the manifest.
message K8scluster {
  // General info about the cluster.
  ClusterInfo clusterInfo = 1;
  // Network range for the VPN.
  string network = 2;
  // Kubeconfig of the cluster.
  string kubeconfig = 3;
  // Kubernetes version.
  string kubernetes = 4;
}

// LBcluster represents a single load balancer cluster specified in the manifest.
message LBcluster {
  // General info about the cluster.
  ClusterInfo clusterInfo = 1;
  // Array of Load balancer roles.
  repeated Role roles = 2;
  // DNS information.
  DNS dns = 3;
  // Kubernetes cluster name of the cluster this load balancer is attached to.
  string targetedK8s = 4;
}

// ClusterInfo holds general information about the clusters.
message ClusterInfo {
  // Name of the cluster.
  string name = 1;
  // Random hash of the cluster.
  string hash = 2;
  // Public SSH key for the nodes.
  string publicKey = 3;
  // Private SSH key for the nodes.
  string privateKey = 4;
  // Array of node pools this cluster is made of.
  repeated NodePool nodePools = 5;
}

// Role represents a single loadbalancer role from the manifest.
message Role {
  // Name of the role.
  string name = 1;
  // Protocol that load balancer uses to forward traffic. ["tcp", "udp"]
  string protocol = 2;
  // Port that load balancer will forward from.
  int32 port = 3;
  // Port that load balancer will forward to.
  int32 targetPort = 4;
  // Targeted nodes in Kubernetes clusters.
  Target target = 5;
  // Type of the role.
  RoleType roleType = 6;
}

// RoleType specifies the type of the role.
enum RoleType {
  // API server load balancer.
  ApiServer = 0;
  // Ingress load balancer.
  Ingress = 1;
}

// Target specifies which nodes are targeted by the load balancer.
enum Target {
  // All nodes in cluster.
  k8sAllNodes = 0;
  // Only Control nodes.
  k8sControlPlane = 1;
  // Only Compute nodes
  k8sComputePlane = 2;
}

// DNS holds general information about the DNS records.
message DNS {
  // DNS zone for the DNS records.
  string dnsZone = 1;
  // User specified hostname. (optional)
  string hostname = 2;
  // Provider for the DNS records.
  Provider provider = 3;
  // The whole hostname of the DNS record.
  string endpoint = 4;
}

// NodePool represents a single node pool used in cluster.
message NodePool {
  // Dynamic or Static node pool info.
  oneof NodePoolType {
    DynamicNodePool dynamicNodePool = 1;
    StaticNodePool staticNodePool = 2;
  }
  // Name of static node pool.
  string name = 3;
  // Array of nodes in this node pool.
  repeated Node nodes = 4;
  // Flag to differentiate between control and compute nodes.
  bool isControl = 5;
  // User defined labels.
  map<string, string> labels = 6;
  // User defined taints.
  repeated Taint taints = 7;
}

// Taint defines a custom defined taint for the node pools.
message Taint {
  // Taint key.
  string key = 1;
  // Taint value.
  string value = 2;
  // Taint effect.
  string effect = 3;
}

// MachineSpec further specifies the requested server type.
message MachineSpec {
  int32 cpuCount = 1;
  int32 memory = 2;
}

// DynamicNodePool represents dynamic node pool used in cluster.
message DynamicNodePool {
  // Machine type of the nodes.
  string serverType = 1;
  // OS image of the nodes.
  string image = 2;
  // Storage disk size of the nodes.
  int32 storageDiskSize = 3;
  // Geograhical region of the nodes.
  string region = 4;
  // Datacentre zone for the nodes.
  string zone = 5;
  // Number of the nodes in the node pool.
  int32 count = 6;
  // Provider configuarion of the node pool.
  Provider provider = 7;
  // Nodepool metadata.
  map<string, MetaValue> metadata = 8;
  // Autoscaler configuration. (optional)
  AutoscalerConf autoscalerConfig = 9;
  // MachineSpec configuration. (optional)
  MachineSpec machineSpec = 10;
  // Spot configuarion. (optional)
  bool spot = 11;
}

// StaticNodePool represents static node pool used in cluster.
message StaticNodePool {
  // Map of keys for each static node in [<Node Endpoint>]<Key> form.
  map<string, string> nodeKeys = 1;
}

// Autoscaler configuration on per node pool basis.
message AutoscalerConf {
  // Minimum number of nodes in node pool.
  int32 min = 1;
  // Maximum number of nodes in node pool.
  int32 max = 2;
}

// MetaValue for the node pool metadata.
message MetaValue {
  // Possible values for the node pool metadata.
  oneof MetaValueOneOf {
    // Subnet CIDR in private VPC for the node pool.
    string cidr = 1;
  }
}

// NodeType specifies the type of the node.
enum NodeType {
  // Worker/Compute node.
  worker = 0;
  // Master/Control node.
  master = 1;
  // Master node, which is also an API endpoint.
  apiEndpoint = 2;
}

// Node represents a single node from the node pool.
message Node {
  // Name of the node.
  string name = 1;
  // Private IP of the node in the VPN.
  string private = 2;
  // Public IP of the node.
  string public = 3;
  // Type of the node.
  NodeType nodeType = 4;
}

// Enum used to replace data not present in static nodepools.
enum StaticNodepoolInfo {
  STATIC_PROVIDER = 0;
  STATIC_REGION = 1;
  STATIC_ZONE = 2;
}


message Provider {
  // Provider name defined in input manifest.
  string specName = 1;
  // Cloud provider name.
  string cloudProviderName = 2;
  // Secret Credentials of the provider.
  // GCP - Service account key.
  // Hetzner - API token.
  // HetznerDNS - API token.
  // OCI - Private key.
  // AWS - Secret key.
  // Azure - Client secret.
  // Cloudflare - API token.
  string credentials = 3;
  // GCP project. [GCP provider]
  string gcpProject = 4;
  // OCID of the user. [OCI provider]
  string ociUserOcid = 5;
  // OCID of the tenancy. [OCI provider]
  string ociTenancyOcid = 6;
  // Fingerprint of the private key saved in Credentials. [OCI provider]
  string ociFingerprint = 7;
  // OCID of the compartment. [OCI provider]
  string ociCompartmentOcid = 8;
  // AWS access key to the secret key saved in the Credentials [AWS provider]
  string awsAccessKey = 9;
  // Azure ID of the subscription. [Azure provider]
  string azureSubscriptionId = 10;
  // Azure ID of the Tenant. [Azure provider]
  string azureTenantId = 11;
  // AzureID of the Client. [Azure provider]
  string azureClientId = 12;
}

// ClusterType specifies the type of the cluster.
enum ClusterType {
  // Kubernetes cluster.
  K8s = 0;
  // Load balancer cluster.
  LB = 1;
}
